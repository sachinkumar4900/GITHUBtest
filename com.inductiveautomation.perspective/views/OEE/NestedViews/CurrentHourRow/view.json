{
  "custom": {
    "AvgSpeed": 0.3759057971014493,
    "CountData": {
      "ActualCount": 92,
      "TargetCount": 102
    },
    "Downtime": 0,
    "EndTime": {
      "$": [
        "ts",
        192,
        1723664074771
      ],
      "$ts": 1723664074771
    },
    "PartNumber": "20015",
    "Performance": 0.9019607843137255,
    "Scrap": 0,
    "StartPlusOne": {
      "$": [
        "ts",
        192,
        1723664074782
      ],
      "$ts": 1723662060000
    },
    "StartTime": "2024-8-14 19:00:00",
    "TypeID": 2,
    "WorkOrder": "20015-IM50-401-21001k",
    "WorkOrderID": 1349,
    "dateDiff": 2075
  },
  "params": {
    "Actual": 92,
    "ProductionLineID": 8,
    "StartTime": "13:00",
    "Target": 102
  },
  "propConfig": {
    "custom.AvgSpeed": {
      "binding": {
        "config": {
          "path": "view.custom.CountData.ActualCount"
        },
        "transforms": [
          {
            "code": "\tdateDiff \u003d (self.custom.dateDiff - self.view.custom.Downtime) / 60.0\n\tavgSpeed \u003d dateDiff / value if value !\u003d 0 else 0\n\treturn avgSpeed",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "persistent": true
    },
    "custom.CountData": {
      "binding": {
        "config": {
          "expression": "{view.custom.TypeID}"
        },
        "transforms": [
          {
            "code": "\timport datetime\n\tfrom datetime import datetime\n#\tcountData \u003d []\n\t\n\t#Get target count for the hour\n\tworkOrderID \u003d self.custom.WorkOrderID\n\tuptime \u003d self.custom.dateDiff - self.custom.Downtime\n\tif value \u003d\u003d 2:\n\t\tif workOrderID is None:\n\t\t\ttargetCount \u003d 0\n\t\telse:\n\t\t\twoData \u003d system.db.runPrepQuery(\"SELECT CycleTime, Cavities FROM WorkOrderMolding WHERE WorkOrderID \u003d ?\", [workOrderID])\n\t\t\t\n\t\t\tcycleTime \u003d woData[0][0]\n\t\t\tcavities \u003d float(woData[0][1]) if \u0027+\u0027 not in woData[0][1] else 2\n\t\t\t\n\t\t\ttargetCount \u003d (3600 / cycleTime) * cavities\n\telse:\n\t\tif workOrderID is None:\n\t\t\tratePerHour \u003d 0\n\t\telse:\n\t\t\tratePerHour \u003d system.db.runScalarPrepQuery(\"SELECT RatePerHour FROM WorkOrderAssembly WHERE WorkOrderID \u003d ?\", [workOrderID])\n\t\t\ttargetCount \u003d ratePerHour\n\ttargetCount *\u003d system.date.getMinute(timestamp)/60.0\n#\tcountData.append(int(targetCount))\n\t\n\t#Get total count for the hour\n\tpath \u003d OEE.getTagPathByProductionLineID(self.params.ProductionLineID)\n\ttotalPath \u003d path + \"/OEE/Quality/Total Daily Count\"\n\t\n\tstartCount \u003d system.tag.queryTagHistory([totalPath], startDate \u003d self.custom.StartTime, endDate \u003d self.custom.StartPlusOne, returnSize\u003d1, aggregationMode\u003d\"LastValue\", returnFormat\u003d\u0027Wide\u0027)\n\tendCount \u003d system.tag.queryTagHistory([totalPath], startDate \u003d system.date.addMinutes(self.custom.EndTime, -5), endDate \u003d self.custom.EndTime, returnSize\u003d1, aggregationMode\u003d\"LastValue\", returnFormat\u003d\u0027Wide\u0027)\n\tcount \u003d endCount.getValueAt(0, 1) - startCount.getValueAt(0, 1) if endCount.getValueAt(0, 1) \u003e\u003d startCount.getValueAt(0, 1) else endCount.getValueAt(0, 1)\n\t\n#\tcountData.append(count)\n\tcountData \u003d {\n\t\t\"TargetCount\": int(targetCount),\n\t\t\"ActualCount\": int(count)\n\t}\n\treturn countData",
            "type": "script"
          }
        ],
        "type": "expr"
      },
      "persistent": true
    },
    "custom.Downtime": {
      "binding": {
        "config": {
          "parameters": {
            "end": "{view.custom.EndTime}",
            "productionLineID": "{view.params.ProductionLineID}",
            "start": "{view.custom.StartTime}"
          },
          "queryPath": "HourByHour/GetDowntimeSumForHour",
          "returnFormat": "scalar"
        },
        "type": "query"
      },
      "persistent": true
    },
    "custom.EndTime": {
      "binding": {
        "config": {
          "expression": "now()"
        },
        "type": "expr"
      },
      "persistent": true
    },
    "custom.PartNumber": {
      "binding": {
        "config": {
          "parameters": {
            "ProductionLineID": "{view.params.ProductionLineID}",
            "WorkOrderID": "{view.custom.WorkOrderID}"
          },
          "queryPath": "WorkOrder/GetPartNumberByWorkOrderID",
          "returnFormat": "scalar"
        },
        "type": "query"
      },
      "persistent": true
    },
    "custom.Performance": {
      "binding": {
        "config": {
          "expression": "{view.custom.CountData.ActualCount} / {view.custom.CountData.TargetCount}"
        },
        "type": "expr"
      },
      "persistent": true
    },
    "custom.Scrap": {
      "binding": {
        "config": {
          "parameters": {
            "end": "{view.custom.EndTime}",
            "productionLineID": "{view.params.ProductionLineID}",
            "start": "{view.custom.StartTime}"
          },
          "queryPath": "HourByHour/GetScrapSumForHour"
        },
        "type": "query"
      },
      "persistent": true
    },
    "custom.StartPlusOne": {
      "binding": {
        "config": {
          "expression": "addMinutes({view.custom.StartTime}, 1)"
        },
        "type": "expr"
      },
      "persistent": true
    },
    "custom.StartTime": {
      "binding": {
        "config": {
          "expression": "dateFormat(now(), \"yyyy-M-dd HH\") + \":00:00\""
        },
        "type": "expr"
      },
      "persistent": true
    },
    "custom.TypeID": {
      "binding": {
        "config": {
          "parameters": {
            "ProductionLineID": "{view.params.ProductionLineID}"
          },
          "polling": {
            "enabled": true,
            "rate": "1"
          },
          "queryPath": "ProductionLine/GetProductionLineTypeByID",
          "returnFormat": "scalar"
        },
        "type": "query"
      },
      "persistent": true
    },
    "custom.WorkOrder": {
      "binding": {
        "config": {
          "path": "view.custom.WorkOrderID"
        },
        "transforms": [
          {
            "code": "\two \u003d system.db.runNamedQuery(\u0027WorkOrder/GetWorkOrderNameByID\u0027, {\"WorkOrderID\": value})\n\treturn wo[0][0]",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "persistent": true
    },
    "custom.WorkOrderID": {
      "binding": {
        "config": {
          "parameters": {
            "ProductionLineID": "{view.params.ProductionLineID}"
          },
          "queryPath": "WorkOrder/GetWorkOrderIDByProductionLineAndTime",
          "returnFormat": "scalar"
        },
        "type": "query"
      },
      "persistent": true
    },
    "custom.dateDiff": {
      "binding": {
        "config": {
          "expression": "toInt(dateDiff({view.custom.StartTime}, {view.custom.EndTime}, \"second\"))"
        },
        "type": "expr"
      },
      "persistent": true
    },
    "params.Actual": {
      "binding": {
        "config": {
          "path": "view.custom.CountData.ActualCount"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.ProductionLineID": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.StartTime": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.Target": {
      "binding": {
        "config": {
          "path": "view.custom.CountData.TargetCount"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 60,
      "width": 900
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "Hour Label"
        },
        "position": {
          "height": 0.6538,
          "width": 0.1349,
          "x": 0.009,
          "y": 0.2013
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "path": "view.params.StartTime"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "textStyle": {
            "fontSize": 42,
            "fontWeight": "bold"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Part Number"
        },
        "position": {
          "height": 0.7115,
          "width": 0.1954,
          "x": 0.1712,
          "y": 0.1412
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "path": "view.custom.PartNumber"
              },
              "transforms": [
                {
                  "code": "\tif value \u003d\u003d None:\n\t\treturn \"N/A\"\n\telse:\n\t\treturn value",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "textStyle": {
            "fontSize": 42,
            "fontWeight": "bold"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Planned"
        },
        "position": {
          "height": 0.7115,
          "width": 0.0754,
          "x": 0.4871,
          "y": 0.1154
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "path": "view.custom.CountData.TargetCount"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "textStyle": {
            "fontSize": 54,
            "fontWeight": "bold"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Actual"
        },
        "position": {
          "height": 0.7692,
          "width": 0.0846,
          "x": 0.3738,
          "y": 0.0577
        },
        "propConfig": {
          "custom.Five": {
            "binding": {
              "config": {
                "expression": "addMinutes(now(), 5)"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "path": "view.custom.CountData.ActualCount"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "textStyle": {
            "fontSize": 54,
            "fontWeight": "bold"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Scrap"
        },
        "position": {
          "height": 0.75,
          "width": 0.048,
          "x": 0.626,
          "y": 0.113
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "path": "view.custom.Scrap"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "textStyle": {
            "fontSize": 50,
            "fontWeight": "bold"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Downtime"
        },
        "position": {
          "height": 0.7692,
          "width": 0.1589,
          "x": 0.6817,
          "y": 0.1437
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "expression": "{view.custom.Downtime}"
              },
              "transforms": [
                {
                  "code": "\timport math\n\tminutes \u003d int(math.floor(value / 60))\n\tseconds \u003d int(round(value % 60))\n\ttimeFormat \u003d str(minutes) + \u0027:\u0027 + str(seconds) if len(str(seconds)) \u003e\u003d 2 else str(minutes) + \u0027:0\u0027 + str(seconds)\n\treturn timeFormat",
                  "type": "script"
                }
              ],
              "type": "expr"
            }
          }
        },
        "props": {
          "textStyle": {
            "fontSize": 42,
            "fontWeight": "bold",
            "textAlign": "right"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Downtime_0"
        },
        "position": {
          "height": 0.6923,
          "width": 0.1463,
          "x": 0.8302,
          "y": 0.1535
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "path": "view.custom.AvgSpeed"
              },
              "transforms": [
                {
                  "code": "\timport math\n\tsecondsAll \u003d (value * 60)\n\tminutes \u003d int(math.floor(secondsAll / 60))\n\tseconds \u003d int(round(secondsAll % 60))\n\ttimeFormat \u003d str(minutes) + \u0027:\u0027 + str(seconds) if len(str(seconds)) \u003e\u003d 2 else str(minutes) + \u0027:0\u0027 + str(seconds)\n\treturn timeFormat",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "textStyle": {
            "fontSize": 42,
            "fontWeight": "bold",
            "textAlign": "right"
          }
        },
        "type": "ia.display.label"
      }
    ],
    "events": {
      "dom": {
        "onClick": {
          "config": {
            "draggable": true,
            "id": "PQsOBwM8",
            "modal": false,
            "overlayDismiss": true,
            "resizable": true,
            "showCloseIcon": true,
            "type": "open",
            "viewParams": {
              "End": "{view.custom.EndTime}",
              "PartNumber": "{view.custom.PartNumber}",
              "ProductionLineID": "{view.params.ProductionLineID}",
              "Start": "{view.custom.StartTime}",
              "WorkOrder": "{view.custom.WorkOrder}"
            },
            "viewPath": "OEE/NestedViews/HourDetails",
            "viewportBound": false
          },
          "scope": "C",
          "type": "popup"
        }
      }
    },
    "meta": {
      "name": "root"
    },
    "propConfig": {
      "props.style.backgroundColor": {
        "binding": {
          "config": {
            "expression": "if({view.custom.Performance} \u003e\u003d 1, \"#8AFF8A\", \r\n\tif({view.custom.Performance} \u003e 1, \"#FFFF8A\", \r\n\t\t\"#FF8A8A\"))"
          },
          "type": "expr"
        }
      }
    },
    "props": {
      "mode": "percent",
      "style": {
        "borderStyle": "solid",
        "borderWidth": 2,
        "overflowY": "hidden"
      }
    },
    "type": "ia.container.coord"
  }
}