{
  "custom": {
    "CommentID": 10,
    "Equipment": "Top Cover Install",
    "ProductionLine": "P08",
    "ProductionLineID": 11
  },
  "params": {
    "EquipmentID": 19,
    "ProcessArea": "Assembly",
    "Reason": 12
  },
  "propConfig": {
    "custom.CommentID": {
      "persistent": true
    },
    "custom.Equipment": {
      "binding": {
        "config": {
          "parameters": {
            "EquipmentID": "{view.params.EquipmentID}"
          },
          "queryPath": "OperatorInterface/GetEquipmentNameByID",
          "returnFormat": "scalar"
        },
        "type": "query"
      },
      "persistent": true
    },
    "custom.ProductionLine": {
      "binding": {
        "config": {
          "parameters": {
            "id": "{view.custom.ProductionLineID}"
          },
          "queryPath": "ProductionLine/GetProductionLineNameByID",
          "returnFormat": "scalar"
        },
        "type": "query"
      },
      "persistent": true
    },
    "custom.ProductionLineID": {
      "binding": {
        "config": {
          "parameters": {
            "EquipmentID": "{view.params.EquipmentID}"
          },
          "queryPath": "ProductionLine/GetProductionLineIDByEquipmentID",
          "returnFormat": "scalar"
        },
        "type": "query"
      },
      "persistent": true
    },
    "params.EquipmentID": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.ProcessArea": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.Reason": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 900,
      "width": 900
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "Label"
        },
        "position": {
          "height": 0.06,
          "width": 0.9556,
          "x": 0.0167,
          "y": 0.0182
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "path": "view.custom.Equipment"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "textStyle": {
            "classes": "Barlow",
            "fontSize": "3rem"
          }
        },
        "type": "ia.display.label"
      },
      {
        "events": {
          "component": {
            "onActionPerformed": [
              {
                "config": {
                  "script": "\t#increment status\n\tsite \u003d self.session.custom.ProductionSite + \"/\"\n\t\n\tequipment \u003d self.view.custom.ProductionLine\n\tprocessArea \u003d self.view.params.ProcessArea\n\t\n\tsystem.tag.writeAsync(\"[default]\" + site + processArea + \"/\" + equipment + \"/Andon/Andon Status\", 3)\n\t\n\treason \u003d self.view.params.Reason\n\n\t#Create Comment and get the newly created CommentID\n\ttext \u003d self.getSibling(\"CommentText\").props.text\n\tpID \u003d None\n\ttimestamp \u003d system.db.runNamedQuery(\u0027Downtime/GetUTC\u0027)[0][0]\n\tisDelete \u003d False\n\t\n\tif text:\n\t\tparams \u003d {\"pID\": pID, \"pText\": text, \"pTimestamp\": timestamp, \"pIsDelete\": isDelete}\n\t\tsystem.db.runNamedQuery(\"Comment/sp_GEN_Comment\", params)\n\t\tcommentIDQuery \u003d system.db.runNamedQuery(\"Comment/GetCommentByTimeStamp\", {\"timeStamp\": timestamp})\n\t\n\tcommentID \u003d commentIDQuery[0][0] if text else None\n\t\n\t#Update Andon Event to \u0027Notified\u0027\n\tequipmentID \u003d self.view.params.EquipmentID\n\tProductionLineID \u003d system.db.runNamedQuery(\"ProductionLine/GetProductionLineIDByEquipmentID\", {\"EquipmentID\": equipmentID})\n\tEventHeader \u003d system.db.runNamedQuery(\"Andon/GetEventHeaderByProductionLineID\", {\"productionLineID\": ProductionLineID[0][0]})\n\tEventStatus \u003d system.db.runNamedQuery(\"Andon/GetEventStatusByEventHeaderID\", {\"EventHeaderID\": EventHeader[0][0]})\n\tAndonGroup \u003d system.db.runNamedQuery(\"Andon/GetAndonGroupIDByReasonID\", {\"ReasonID\": reason})\n\t\n\tif EventStatus !\u003d 4:\n\t\tpEventHeaderID \u003d EventHeader[0][0]\n\t\tpID \u003d None\n\t\tpNotificationGroupID \u003d AndonGroup[0][0]\n\t\tpTimestamp \u003d timestamp\n\t\tpProductionLineID \u003d ProductionLineID[0][0]\n\t\tpStatusID \u003d 4\n\t\tpCommentID \u003d commentID\n\t\tpReasonID \u003d reason\n\t\tpIsDelete \u003d False\n\t    \n\t\tparams \u003d {\"pEventHeaderID\": pEventHeaderID, \"pID\": pID, \"pNotificationGroupID\": pNotificationGroupID, \"pTimestamp\": pTimestamp, \"pProductionLineID\": pProductionLineID, \"pStatusID\": pStatusID, \"pCommentID\": pCommentID, \"pReasonID\": pReasonID, \"pIsDelete\": pIsDelete}\n\t\tsystem.db.runNamedQuery(\"Andon/sp_ANDON_AndonEvent\", params)\n\t\t\n\tsystem.db.runPrepUpdate(\"UPDATE DowntimeEvent SET ReasonID \u003d ?, CommentID \u003d ? FROM DowntimeEvent de JOIN Equipment e ON e.ID \u003d de.EquipmentID WHERE e.ProductionLineID \u003d ? AND EndTime IS NULL\", [reason, commentID, ProductionLineID[0][0]])\n\t\t\n\t#pEquipmentID \u003d self.view.params.EquipmentID\n\t#pReasonID \u003d self.getSibling(\"AndonReason_Select\").props.value\n\t#DowntimeEventID \u003d system.db.runNamedQuery(\"Downtime/GetActiveDowntimeEventByEquipmentID\", {\"EquipmentID\": pEquipmentID})\n\t#system.db.runNamedQuery(\"Downtime/sp_GEN_DowntimeEvent\", {\"pID\": DowntimeEventID[0][0], \"pReasonID\": pReasonID})"
                },
                "scope": "G",
                "type": "script"
              },
              {
                "config": {
                  "draggable": true,
                  "id": "AndonTriggerResolved",
                  "modal": true,
                  "overlayDismiss": false,
                  "resizable": true,
                  "showCloseIcon": false,
                  "type": "open",
                  "viewParams": {
                    "EquipmentID": "{view.params.EquipmentID}",
                    "ProcessArea": "{view.params.ProcessArea}"
                  },
                  "viewPath": "Andon/AndonTriggerPopup",
                  "viewportBound": false
                },
                "scope": "C",
                "type": "popup"
              },
              {
                "config": {
                  "script": "\tsystem.perspective.closePopup(\u0027AndonComment1\u0027)"
                },
                "scope": "G",
                "type": "script"
              }
            ]
          }
        },
        "meta": {
          "name": "Submit"
        },
        "position": {
          "height": 0.15,
          "width": 0.3337,
          "x": 0.625,
          "y": 0.82
        },
        "props": {
          "text": "SUBMIT",
          "textStyle": {
            "fontSize": "1.5rem"
          }
        },
        "type": "ia.input.button"
      },
      {
        "events": {
          "component": {
            "onActionPerformed": {
              "config": {
                "script": "\tsystem.perspective.closePopup(\u0027AndonComment1\u0027)"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "Cancel",
          "tooltip": {
            "enabled": true
          }
        },
        "position": {
          "height": 0.15,
          "width": 0.178,
          "x": 0.4199,
          "y": 0.82
        },
        "props": {
          "primary": false,
          "text": "CANCEL",
          "textStyle": {
            "fontSize": "1.5rem"
          }
        },
        "type": "ia.input.button"
      },
      {
        "meta": {
          "name": "Hold Item",
          "visible": false
        },
        "position": {
          "height": 0.15,
          "width": 0.3493,
          "x": 0.0417,
          "y": 0.82
        },
        "props": {
          "text": "HOLD ITEM",
          "textStyle": {
            "fontSize": "1.5rem"
          }
        },
        "type": "ia.input.button"
      },
      {
        "meta": {
          "name": "CommentText"
        },
        "position": {
          "height": 0.53,
          "width": 0.92,
          "x": 0.042,
          "y": 0.2492
        },
        "props": {
          "placeholder": "Type comment",
          "style": {
            "fontSize": "1rem"
          }
        },
        "type": "ia.input.text-area"
      },
      {
        "meta": {
          "name": "Comment_Label"
        },
        "position": {
          "height": 0.075,
          "width": 0.75,
          "x": 0.042,
          "y": 0.1749
        },
        "props": {
          "text": "Comment",
          "textStyle": {
            "classes": "Barlow",
            "fontSize": "2.5rem"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Reason_Label"
        },
        "position": {
          "height": 0.0757,
          "width": 0.75,
          "x": 0.042,
          "y": 0.0861
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "path": "view.params.Reason"
              },
              "transforms": [
                {
                  "code": "\treason \u003d system.db.runNamedQuery(\"Downtime/GetDowntimeReasonByID\", {\"ReasonID\": value})\n\treturn reason[0][0]",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "textStyle": {
            "classes": "Barlow",
            "fontSize": "2.5rem"
          }
        },
        "type": "ia.display.label"
      }
    ],
    "meta": {
      "name": "root",
      "tooltip": {
        "enabled": true
      }
    },
    "position": {
      "x": -2,
      "y": 6
    },
    "propConfig": {
      "custom.DateTimeNow": {
        "binding": {
          "config": {
            "expression": "now()"
          },
          "type": "expr"
        }
      }
    },
    "props": {
      "mode": "percent",
      "style": {
        "backgroundColor": "#FFFFFF"
      }
    },
    "scripts": {
      "customMethods": [],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "CommentID",
          "pageScope": true,
          "script": "\t# implement your handler here\n\t#if payload[\"CommentID\"].getRowCount() \u003e 0:\n\tcommentID \u003d payload[\"CommentID\"]\n\tself.view.custom.CommentID \u003d commentID",
          "sessionScope": true,
          "viewScope": false
        }
      ]
    },
    "type": "ia.container.coord"
  }
}